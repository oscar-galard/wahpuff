services:
  web:
    build:
      context: .
      dockerfile: ./docker/production/nginx/Dockerfile
    restart: unless-stopped
    volumes:
      - laravel-storage-production:/var/www/storage:ro
      - laravel-public-assets:/var/www/public/build:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - laravel-public-certbot:/var/www/public/.well-known/acme-challenge
    networks:
      - laravel-production
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      php-fpm:
        condition: service_healthy

  php-fpm:
    build:
      context: .
      dockerfile: ./docker/common/php-fpm/Dockerfile
      target: production
    restart: unless-stopped
    volumes:
      - laravel-public-assets:/var/www/public/build
      - laravel-storage-production:/var/www/storage
    env_file:
      - .env
    networks:
      - laravel-production
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16
    restart: unless-stopped
    user: postgres
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE:-app}
      - POSTGRES_USER=${POSTGRES_USERNAME:-laravel}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secret}
    volumes:
      - postgres-data-production:/var/lib/postgresql/data
    networks:
      - laravel-production
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - laravel-production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - laravel-public-certbot:/var/www/public/.well-known/acme-challenge
    entrypoint: >
      /bin/sh -c 'trap exit TERM;
      while :;
      do certbot renew --webroot -w /var/www/public --quiet;
      sleep 12h & wait $${!};
      done;'
    restart: unless-stopped
    networks:
      - laravel-production

networks:
  laravel-production:

volumes:
  postgres-data-production:
  laravel-storage-production:
  laravel-public-assets:
  certbot-etc:
  certbot-var:
  laravel-public-certbot:
